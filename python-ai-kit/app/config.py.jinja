from functools import lru_cache
from pathlib import Path
from typing import Any

from pydantic import AnyHttpUrl, Field, SecretStr, ValidationInfo, field_validator
from pydantic_settings import BaseSettings, SettingsConfigDict

from app.utils.config_utils import (
    EncryptedField,
    EnvironmentType,
    FernetDecryptorField,
)


class Settings(BaseSettings):
    model_config = SettingsConfigDict(
        env_file=str(Path(__file__).parent.parent / "config" / ".env"),
        env_file_encoding="utf-8",
        extra="ignore",
        # default env_file solution search .env every time BaseSettings is instantiated
        # dotenv search .env when module is imported, without usecwd it starts from the file it was called
    )

    # CORE SETTINGS
    fernet_decryptor: FernetDecryptorField = Field("MASTER_KEY")
    environment: EnvironmentType = EnvironmentType.LOCAL

    # API SETTINGS
    api_name: str = f"{{project_name}} API"
    api_v1: str = "/api/v1"
    api_latest: str = api_v1
    paging_limit: int = 100
    cors_origins: list[AnyHttpUrl] = []
    cors_allow_all: bool = False

    {% if project_type in ["api-monolith", "api-microservice"] %}
    # DATABASE SETTINGS
    db_host: str = "localhost"
    db_port: int = 5432
    db_name: str = "{{project_name}}"
    db_user: str = "user"
    db_password: SecretStr = SecretStr("password")
    {% endif %}

    {% if project_type == "agent" %}
    # AGENT SETTINGS
    debug_mode: bool = False
    api_key: str
    ai_provider: str = "openai"
    model: str = "gpt-4o"
    mcp_urls: list[str] = ["http://127.0.0.1:8000/mcp"]
    mcp_enabled: bool = True
    timeout: int = 360
    default_language: str = "english"

    max_output_tokens: int | None = None
    max_input_tokens: int | None = None
    max_requests: int | None = None


    @field_validator('mcp_urls', mode='before')
    @classmethod
    def parse_mcp_urls(cls, v):
        """Parse MCP URLs from environment variable (comma-separated string or list)."""
        if isinstance(v, str):
            return [url.strip() for url in v.split(',') if url.strip()]
        return v
    {% endif %}

    {% if "celery" in plugins %}
    # CELERY SETTINGS
    CELERY_BROKER_URL: str
    CELERY_RESULT_BACKEND: str
    {% endif %}

    @field_validator("cors_origins", mode="after")
    @classmethod
    def assemble_cors_origins(cls, v: str | list[str]) -> list[str] | str:
        if isinstance(v, str) and not v.startswith("["):
            return [i.strip() for i in v.split(",")]
        if isinstance(v, (list, str)):
            return v

        # This should never be reached given the type annotation, but ensures type safety
        raise ValueError(f"Unexpected type for cors_origins: {type(v)}")

    @field_validator("*", mode="after")
    @classmethod
    def _decryptor(cls, v: Any, validation_info: ValidationInfo, *args, **kwargs) -> Any:
        if isinstance(v, EncryptedField):
            return v.get_decrypted_value(validation_info.data["fernet_decryptor"])
        return v


    {%if project_type == "mcp-server" %}
    # MCP SETTINGS
    mcp_server_name: str = f"MCP Server"
    {% endif %}

    {% if project_type in ["api-monolith", "api-microservice"] %}
    @property
    def db_uri(self) -> str:
        return (
            f"postgresql+psycopg://"
            f"{self.db_user}:{self.db_password.get_secret_value()}"
            f"@{self.db_host}:{self.db_port}/{self.db_name}"
        )
    {% endif %}

    # 0. pytest ini_options
    # 1. environment variables
    # 2. .env
    # 3. default values in pydantic settings


@lru_cache()
def _get_settings() -> Settings:
    return Settings()  # type: ignore[call-arg]


settings = _get_settings()
